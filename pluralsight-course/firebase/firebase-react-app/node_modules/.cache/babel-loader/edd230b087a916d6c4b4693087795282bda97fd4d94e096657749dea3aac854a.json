{"ast":null,"code":"var _jsxFileName = \"C:\\\\_tandoan\\\\learning-all-projects\\\\pluralsight-course\\\\firebase\\\\firebase-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport { getRedirectResult, GoogleAuthProvider, signInWithRedirect } from \"firebase/auth\";\nimport { auth, provider } from \"./configuration\"; // Assuming the correct path to your configuration file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    signInWithRedirect(auth, provider);\n    getRedirectResult(auth).then(result => {\n      // This gives you a Google Access Token. You can use it to access Google APIs.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n\n      // The signed-in user info.\n      const user = result.user;\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n\n    // Function to fetch data from the database\n    const fetchData = () => {\n      // Listen for changes in the collection\n      onValue(collectionRef, snapshot => {\n        const dataItem = snapshot.val();\n\n        // Check if dataItem exists\n        if (dataItem) {\n          // Convert the object values into an array\n          const displayItem = Object.values(dataItem);\n          setData(displayItem);\n        }\n      });\n    };\n\n    // Fetch data when the component mounts\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data from database:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getRedirectResult","GoogleAuthProvider","signInWithRedirect","auth","provider","jsxDEV","_jsxDEV","App","_s","data","setData","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","fetchData","onValue","collectionRef","snapshot","dataItem","val","displayItem","Object","values","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","_c","$RefreshReg$"],"sources":["C:/_tandoan/learning-all-projects/pluralsight-course/firebase/firebase-react-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\n\n\nimport { getRedirectResult, GoogleAuthProvider, signInWithRedirect } from \"firebase/auth\";\nimport { auth, provider } from \"./configuration\"; // Assuming the correct path to your configuration file\n\n\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n\n\n\n  useEffect(() => {\n\n    signInWithRedirect(auth, provider);\n\n    getRedirectResult(auth)\n      .then((result) => {\n        // This gives you a Google Access Token. You can use it to access Google APIs.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n\n        // The signed-in user info.\n        const user = result.user;\n        // IdP data available using getAdditionalUserInfo(result)\n        // ...\n      }).catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.customData.email;\n        // The AuthCredential type that was used.\n        const credential = GoogleAuthProvider.credentialFromError(error);\n        // ...\n      });\n\n    // Function to fetch data from the database\n    const fetchData = () => {\n      // Listen for changes in the collection\n      onValue(collectionRef, (snapshot) => {\n        const dataItem = snapshot.val();\n\n        // Check if dataItem exists\n        if (dataItem) {\n          // Convert the object values into an array\n          const displayItem = Object.values(dataItem);\n          setData(displayItem);\n        }\n      });\n    };\n\n    // Fetch data when the component mounts\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h1>Data from database:</h1>\n      <ul>\n        {data.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW;AAGlB,SAASC,iBAAiB,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,eAAe;AACzF,SAASC,IAAI,EAAEC,QAAQ,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIlD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAIpCD,SAAS,CAAC,MAAM;IAEdI,kBAAkB,CAACC,IAAI,EAAEC,QAAQ,CAAC;IAElCJ,iBAAiB,CAACG,IAAI,CAAC,CACpBQ,IAAI,CAAEC,MAAM,IAAK;MAChB;MACA,MAAMC,UAAU,GAAGZ,kBAAkB,CAACa,oBAAoB,CAACF,MAAM,CAAC;MAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;;MAEpC;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;MACxB;MACA;IACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAClB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;MAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;MAClC;MACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;MACpC;MACA,MAAMX,UAAU,GAAGZ,kBAAkB,CAACyB,mBAAmB,CAACP,KAAK,CAAC;MAChE;IACF,CAAC,CAAC;;IAEJ;IACA,MAAMQ,SAAS,GAAGA,CAAA,KAAM;MACtB;MACAC,OAAO,CAACC,aAAa,EAAGC,QAAQ,IAAK;QACnC,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;;QAE/B;QACA,IAAID,QAAQ,EAAE;UACZ;UACA,MAAME,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACJ,QAAQ,CAAC;UAC3CrB,OAAO,CAACuB,WAAW,CAAC;QACtB;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACAN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BlC,OAAA;MAAA8B,QAAA,EACG3B,IAAI,CAACgC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpBrC,OAAA;QAAA8B,QAAA,EAAiBM;MAAI,GAAZC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAChC,EAAA,CA5DQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AA8DZ,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}