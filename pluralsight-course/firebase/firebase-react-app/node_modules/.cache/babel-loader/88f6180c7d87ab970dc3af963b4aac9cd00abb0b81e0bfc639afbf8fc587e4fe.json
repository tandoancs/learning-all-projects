{"ast":null,"code":"var _jsxFileName = \"C:\\\\_tandoan\\\\learning-all-projects\\\\pluralsight-course\\\\firebase\\\\firebase-react-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport './App.css';\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { auth, provider } from \"./configuration\"; // Assuming the correct path to your configuration file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  signInWithPopup(auth, provider).then(result => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // IdP data available using getAdditionalUserInfo(result)\n    // ...\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data from database:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","GoogleAuthProvider","signInWithPopup","auth","provider","jsxDEV","_jsxDEV","App","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","children","fileName","_jsxFileName","lineNumber","columnNumber","data","map","item","index","_c","$RefreshReg$"],"sources":["C:/_tandoan/learning-all-projects/pluralsight-course/firebase/firebase-react-app/src/App.js"],"sourcesContent":["import React from \"react\";\nimport './App.css';\n\n\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { auth, provider } from \"./configuration\"; // Assuming the correct path to your configuration file\n\n\n\n\nfunction App() {\n\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // ...\n    });\n\n  return (\n    <div>\n      <h1>Data from database:</h1>\n      <ul>\n        {data.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAGlB,SAASC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AACnE,SAASC,IAAI,EAAEC,QAAQ,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKlD,SAASC,GAAGA,CAAA,EAAG;EAEbL,eAAe,CAACC,IAAI,EAAEC,QAAQ,CAAC,CAC5BI,IAAI,CAAEC,MAAM,IAAK;IAChB;IACA,MAAMC,UAAU,GAAGT,kBAAkB,CAACU,oBAAoB,CAACF,MAAM,CAAC;IAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;IACpC;IACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;IACxB;IACA;EACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;IAClB;IACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;IAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;IAClC;IACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;IACpC;IACA,MAAMX,UAAU,GAAGT,kBAAkB,CAACsB,mBAAmB,CAACP,KAAK,CAAC;IAChE;EACF,CAAC,CAAC;EAEJ,oBACEV,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BtB,OAAA;MAAAkB,QAAA,EACGK,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpB1B,OAAA;QAAAkB,QAAA,EAAiBO;MAAI,GAAZC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACK,EAAA,GAhCQ1B,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}